<?php
namespace app\models;

use app\models\Warranty;
use EasySlugger\Slugger;
use Exception;
use MongoDate;
use Yii;
use app\helpers\Utils;
use app\helpers\CActiveRecord;
use yii\mongodb\ActiveQuery;
use yii\mongodb\Collection;
use yii\mongodb\Connection;
use yii\mongodb\rbac\MongoDbManager;
use yii\web\IdentityInterface;
use yii\base\NotSupportedException;
use yii2tech\ar\position\PositionBehavior;

/**
 * @property string deviser_id
 * @property array categories
 * @property array collections
 * @property array name
 * @property array slug
 * @property array description
 * @property array media
 * @property array options
 * @property array madetoorder
 * @property array sizechart
 * @property array bespoke
 * @property array preorder
 * @property array returns
 * @property array warranty
 * @property string currency
 * @property string weight_unit
 * @property array price_stock
 * @property array references
 * @property int position
 * @property MongoDate created_at
 * @property MongoDate updated_at
 * @property int enabled
 */
class ProductReference extends CActiveRecord {

	public function attributes() {
		return [
			'id',
			'name',
			'position',
			'created_at',
			'updated_at',
		];
	}

	/**
	 * Initialize model attributes
	 */
	public function init()
	{
		parent::init();

	}

	public function beforeSave($insert) {

		if (empty($this->created_at)) {
			$this->created_at = new MongoDate();
		}
		$this->updated_at = new MongoDate();

		return parent::beforeSave($insert);
	}

	public function behaviors()
	{
//		return parent::behaviors(); // TODO: Change the autogenerated stub
		return array_merge(
			parent::behaviors(),
			[
				'positionBehavior' => [
					'class' => PositionBehavior::className(),
					'positionAttribute' => 'position',
				],
			]
		);
	}


	/**
	 * Prepare the ActiveRecord properties to serialize the objects properly, to retrieve an serialize
	 * only the attributes needed for a query context
	 *
	 * @param $view
	 */
	public static function setSerializeScenario($view)
	{
		switch ($view) {
			case self::SERIALIZE_SCENARIO_PREVIEW:
			case self::SERIALIZE_SCENARIO_PUBLIC:
			case self::SERIALIZE_SCENARIO_ADMIN:
			default:
				static::$serializeFields = [
					'id',
					'name',
					'position',
				];
				break;
		}
	}

	public function rules()
	{
		return [
			// the name, email, subject and body attributes are required
			[
				[
					'id',
					'name',
				],
				'required',
				'on' => [Product::SCENARIO_PRODUCT_UPDATE_DRAFT]
			],
		];
	}

}
