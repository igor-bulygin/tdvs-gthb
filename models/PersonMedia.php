<?php
namespace app\models;

/**
 * @property string $header
 * @property string $header_cropped
 * @property string $profile
 * @property string $profile_cropped
 * @property array $photos
 *
 * @method Person getParentObject()
 */
class PersonMedia extends EmbedModel
{

	public function attributes()
	{
		return [
			'header',
			'header_cropped',
			'profile',
			'profile_cropped',
			'photos',
		];
	}

	public function getParentAttribute()
	{
		return "media";
	}

	/**
	 * Assign some default attributes for historical objects
	 *
	 * @param array $data
	 * @param null $formName
	 * @return bool
	 */
	public function load($data, $formName = null)
	{
		$loaded = parent::load($data, $formName);

		if (empty($this->header_cropped)) {
			$this->header_cropped = $this->header;
		}

		if (empty($this->profile_cropped)) {
			$this->profile_cropped = $this->profile;
		}

		return $loaded;
	}


	public function rules()
	{
		return [
			[['header', 'header_cropped', 'profile', 'profile_cropped', 'photos'], 'required', 'on' => Person::SCENARIO_DEVISER_UPDATE_PROFILE],
			[['header', 'header_cropped', 'profile', 'profile_cropped'], 'validateDeviserMediaFileExist', 'on' => Person::SCENARIO_DEVISER_UPDATE_PROFILE],
			[['photos'], 'validateDeviserPhotosExists', 'on' => Person::SCENARIO_DEVISER_UPDATE_PROFILE],
			[['photos'], 'validateAmountPhotos', 'on' => Person::SCENARIO_DEVISER_UPDATE_PROFILE],
			[['header', 'header_cropped', 'profile', 'profile_cropped', 'photos'], 'safe', 'on' => [Person::SCENARIO_DEVISER_UPDATE_DRAFT, Person::SCENARIO_DEVISER_CREATE_DRAFT]],
		];
	}

	/**
	 * Custom validator for amount of photos
	 *
	 * @param $attribute
	 * @param $params
	 */
	public function validateAmountPhotos($attribute, $params)
	{
		$photos = $this->$attribute;
		if ((count($photos) < 3) || (count($photos) > 7)) {
			$this->addError($attribute, 'Must upload between 3 and 7 photos.');
		}
	}

	/**
	 * Custom validator for amount of photos
	 *
	 * @param $attribute
	 * @param $params
	 */
	public function validateDeviserMediaFileExist($attribute, $params)
	{
		$filename = $this->$attribute;
		if (!$this->getParentObject()->existMediaFile($filename)) {
			$this->addError($attribute, sprintf('File %s not found', $filename));
		}
	}

	/**
	 * Custom validator for amount of photos
	 *
	 * @param $attribute
	 * @param $params
	 */
	public function validateDeviserPhotosExists($attribute, $params)
	{
		$photos = $this->$attribute;
		foreach ($photos as $filename) {
			if (!$this->getParentObject()->existMediaFile($filename)) {
				$this->addError($attribute, sprintf('File %s not found', $filename));
			}
		}
	}

	/**
	 * Add additional error to make easy show labels in client side
	 */
	public function afterValidate()
	{
		parent::afterValidate(); // TODO: Change the autogenerated stub
		foreach ($this->errors as $attribute => $error) {
			switch ($attribute) {
				case 'header':
				case 'header_cropped':
					if (!in_array("header", $this->getParentObject()->getErrors("required"))) {
						$this->getParentObject()->addError("required", "header");
					}
					break;
				case 'profile':
				case 'profile_cropped':
					if (!in_array("profile", $this->getParentObject()->getErrors("required"))) {
						$this->getParentObject()->addError("required", "profile");
					}
					break;
				case 'photos':
					$this->getParentObject()->addError("required", "about");
					$this->getParentObject()->addError("required", "photos");
					break;
			}
		};
	}

}